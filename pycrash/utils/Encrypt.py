# PyCrash - A Run-Time Exception Dumper for the Python programming language
#
# (C)Copyright Carmine Ivan Delio Noviello 2003-2004 <cnoviello@pycrash.org>
#
# For further informations, please refer to: www.pycrash.org
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the
# Free Software Foundation, Inc., 59 Temple Place - Suite 330,
# Boston, MA 02111-1307, USA.

import pycrash, Crypto.PublicKey, pickle, cPickle
from Crypto.Util.number import getRandomNumber
from Crypto.Util.randpool import RandomPool

class BadKeyError(Exception):
	def __init__(self, value):
		self._value = value

	def __str__(self):
		return repr(self._value)

class EncryptedPyCrash(pycrash.PyCrash):
	"""
		This class allows users to encrypt generated crash dump.
	"""

	__initialized = 0

	def __init__(self, strings):
		pycrash.PyCrash.__init__(self, strings)

		self.__pubKey = None
		self.__initialized = 1

	def encryptingProgress(self, percentage):
		pass

	def getEncryptedCrashDump(self):
		print """
******

\x1b[1;31mWarining\x1b[0m: getEncryptedCrashDump() method is deprecated. Starting from PyCrash-0.4 it will be no longer supported. Use instead getCrashDump() method

******"""
		return self.getCrashDump()

	def getCrashDump(self):
		"""
			Returns the encrypted version of crash dump using public key specified with
			setPubKeyFilename() method 
		"""
		assert self.__initialized, "EncryptedPyCrash.__init__() not called"
		assert self.__pubKey is not None, "No public key specified with setPubKeyFilenaname() method"

		crashDump = super(EncryptedPyCrash, self).getCrashDump()
		if crashDump is None:
			return None

		size = len(crashDump)
		bits = []
		pos = 0
		chunklen = self.__pubKey.size() // 8
		lines = size / chunklen 
		i = 1
		while pos < size:
			cry = self.__pubKey.encrypt(crashDump[pos:pos+chunklen], "")
			bits.append(cry[0])
			pos += chunklen
			self.encryptingProgress((i*100)/lines)
			i += 1
	
		return bits

	def saveToFile(self, filename):
		""" Save the crash dump file in a given 'filename' directory """
		assert self.__initialized, "EncryptedPyCrash.__init__() not called"
		
		self.__fileName = filename

		if self.isCrashed():
			fd = open(filename, "wb")
			cPickle.dump(self.getCrashDump(), fd)
			fd.close()

	def setPubKeyFilename(self, keyFilename):
		"""
			Set the public key, contained in keyFilename, used to encrypt crash dump
		"""
		assert self.__initialized, "EncryptedPyCrash.__init__() not called"
		
		#Retrieving the public key from the file
		try:
			fo = open(keyFilename, "r")
		except IOError:
			raise BadKeyError("Unknown " + keyFilename + " filename")
		
		try:
			self.__pubKey = pickle.load(fo)
		except:
			raise BadKeyError("The file " + keyFilename + " doesn't contain a valid key generated by keygen.py utility")
		
		fo.close()
		if not issubclass(self.__pubKey.__class__, Crypto.PublicKey.pubkey.pubkey):
			raise BadKeyError("The file " + keyFilename + " doesn't contain a valid key generated by keygen.py utility")
